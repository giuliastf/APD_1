TEMA 1 APD
IMBREA GIULIA STEFANIA 331CB

Intro
Acest program paralelizează algoritmul Marching Squares pentru a genera contururi într-o imagine dată. Algoritmul împarte imaginea în blocuri mai mici, redimensionează aceste blocuri, identifică contururile în fiecare bloc și le combină pentru a crea o imagine finală cu contururi. Paralelizarea se realizează prin utilizarea mai multor fire de execuție (thread-uri) care lucrează asupra diferitelor părți ale imaginii, fiecare bloc fiind prelucrat independent, accelerând astfel procesul de generare a contururilor. Programul citește o imagine de intrare, aplică algoritmul Marching Squares folosind fire de execuție și salvează imaginea rezultată într-un fișier de ieșire.

Structura Thread 
- a fost definită pentru a gestiona fiecare thread în parte. Fiecare structură Thread include atribute precum ID-ul thread-ului, pointeri către imaginea de intrare și ieșire, datele pentru grilă, hărțile de contur, mărimile pașilor și barierele de sincronizare. 
- Bariera din structura este folosita pentru a asigura o execuție coordonată a thread-urilor, în special la începutul și la sfârșitul fiecărui pas al algoritmilor.

Sample Grid
- Algoritmul Sample Grid împarte imaginea de intrare într-o grilă de puncte pe baza mărimilor pașilor step_x și step_y. 
- Fiecare thread este responsabil de procesarea unei porțiuni a acestei grile. 
- Sincronizarea barierei este utilizată pentru a asigura că toate thread-urile încep și termină simultan sarcinile de eșantionare.
- În cadrul funcției sample_grid, paralelizarea a fost folosită în interiorul buclei for(i = start_p; i < end_p; i++), unde start_p și end_p definesc porțiunea specifică de eșantionare a imaginii pentru fiecare thread. Paralelizarea permite fiecărui thread să se ocupe de un interval disjunct de linii (i) în matricea grid, ceea ce duce la o distribuție echitabilă a sarcinii între thread-uri. Avantajul paralelizării în această fază constă în posibilitatea de a procesa mai multe porțiuni ale imaginii în același timp, astfel încât timpul total de eșantionare să fie redus. Aceasta duce la o creștere a performanței programului, mai ales în cazul imaginilor mari, unde operațiile pe pixeli pot fi foarte costisitoare în timp. 

Rescale Image
- Funcția rescale_image este responsabilă de redimensionarea imaginii de intrare la o rezoluție mai mică, astfel încât să se potrivească cu dimensiunea maximă specificată (RESCALE_X și RESCALE_Y). În cazul în care imaginea de intrare este deja mai mică sau egală cu rezoluția dorită, aceasta este păstrată nemodificată.
- Redimensionarea este realizată separat pentru fiecare thread, unde fiecare thread este responsabil pentru un anumit interval de linii ale imaginii redimensionate, împărțind astfel sarcina între thread-uri și accelerând procesul de redimensionare (folosind start si end)

March
- În funcția march, fiecare thread iterază prin subgrupurile de eșantioane ale imaginii redimensionate și determină valoarea binară pe baza stării pixelilor (0 sau 1) din matricea grid. Acesta calculează apoi un cod binar și actualizează imaginea redimensionată (scaled_image) prin înlocuirea pixelilor corespunzători cu pixelii din imaginea de contur asociată codului binar calculat.
- Procesul de paralelizare se realizează prin împărțirea subgrupurilor de eșantioane între mai multe thread-uri. Astfel, fiecare thread se ocupă de un interval disjunct de subgrupuri de eșantioane și aplică algoritmul Marching Squares pentru acele subgrupuri specifice. 

Thread Function
- este funcția pe care fiecare thread o execută în cadrul programului tău. Aceasta este funcția de pornire pentru fiecare thread creat și este specificată ca argument în momentul creării unui thread nou folosind pthread_create.
- În această funcție, parametrul arg este un pointer la structura Thread care conține toate informațiile necesare pentru ca fiecare thread să își execute sarcinile în mod corespunzător.
- În interiorul funcției thread_function, fiecare thread execută pașii algoritmului Marching Squares
- După ce fiecare thread își finalizează sarcinile, acesta așteaptă celelalte thread-uri să își termine execuția folosind pthread_barrier_wait(data->barrier). Bariera (implementată cu ajutorul pthread_barrier_t) se asigură că toate thread-urile au ajuns la acest punct înainte de a continua cu următoarele etape ale algoritmului. După terminarea sarcinilor, fiecare thread apelează pthread_exit(NULL) pentru a se termina și a elibera resursele alocate.

Main
- Verificarea Argumentelor: Se verifică dacă sunt suficiente argumente de linie de comandă. Dacă nu sunt, afișează un mesaj de eroare și încheie programul.
- Inițializarea Barierei: Se inițializează o barieră pentru a sincroniza execuția thread-urilor.
- Inițializarea Hartilor de Contur: Se creează și se încarcă hărțile de contur necesare pentru generarea contururilor.
- Citirea Imaginii de Intrare: Se citește imaginea de intrare din fișierul specificat în argumentele de linie de comandă.
- Inițializarea și Alocarea Memoriei: Se inițializează structurile și variabilele necesare pentru redimensionarea imaginii și se alocă memoria pentru stocarea matricei de eșantioane și a imaginii redimensionate.
- Crearea și Așteptarea Thread-urilor: Se creează thread-urile și li se atribuie funcția thread_function pentru execuție. Programul așteaptă ca toate thread-urile să își termine execuția.
- Scrierea Imaginii Rezultate: După ce toate thread-urile și-au terminat execuția, imaginea rezultată este scrisă într-un fișier de ieșire specificat în argumentele de linie de comandă.
